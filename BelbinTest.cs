using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Telegram.Bot.Requests;
using Telegram.Bot.Types;

namespace IDecisBot
{
    internal class BelbinTest
    {
        string[][] prompts = {
            new string[8]{ "1. Я полагаю, я могу быстро увидеть новые возможности и воспользоваться ими",
"2. Я могу работать хорошо с самыми разными людьми",
"3. Генерирование идей является одним из моих природных качеств",
"4. Моя способность состоит в том, чтобы выявлять людей, которые могут внести новую энергию в групповую активность",
"5. Моя способность следовать планам до конца имеет много общего с моей персональной (личной) эффективностью",
"6. Я готов столкнуться лицом к лицу с временной непопулярностью, если это приведет к стоящим результатам в конце",
"7. Обычно я умею чувствовать, что является реалистичным и возможным для работы",
"8. Я могу предложить нечто разумное для альтернативного курса действий без внесения пристрастия или предвзятости"},

new string[8]{ "1. Я не чувствую себя непринужденно, пока собрания не будут хорошо подготовлены и проведены в общих чертах хорошо",
"2. Я склонен быть великодушным к другим, тем, кто имеет обоснованную точку зрения, которая не выставляется напоказ",
"3. Я имею склонность говорить слишком много, как только группа доберется до новых идей",
"4. Мой объективный взгляд делает трудным для меня вопрос присоединения к коллегам с готовностью и энтузиазмом",
"5. Иногда меня видят как волевого и авторитарного, если существует необходимость, чтобы что-то было сделано",
"6. Иногда меня видят как волевого и авторитарного, если существует необходимость, чтобы что-то было сделано",
"7. Я склонен увлекаться идеями, которые приходят мне в голову, и, таким образом, я теряю (плохо ориентируюсь) направление в том, что происходит",
"8. Мои коллеги хотят, чтобы я излишне беспокоился о деталях и о том, что дела могут идти не так"},

new string[8]{ "1. У меня есть способность влиять на людей без давления на них",
"2. Моя обычная бдительность предотвращает ошибки и оплошности, возникающие из-за невнимательности",
"3. Я готов потребовать действий, чтобы удостовериться, что собрание не тратит попусту время и не теряет из вида основные цели",
"4. Можно рассчитывать, что я внесу в качестве вклада нечто оригинальное",
"5. Я всегда готов поддержать хорошее предложение в общих интересах",
"6. Я стремлюсь искать самое свежее в новых идеях и усовершенствованиях",
"7. Я полагаю, что моя способность к здравому смыслу может помочь принять правильное решение",
"8. На меня можно положиться в том, чтобы все основные работы были организованы."},

new string[8]{ "1. У меня есть интерес лучше познакомиться с коллегами",
"2. Я не сопротивляюсь, если уделяется внимание точке зрения других, а моя находится в меньшинстве",
"3. Обычно я умею находить линию поведения и аргументы, чтобы доказать несостоятельность неразумных предложений",
"4. Я думаю, у меня есть талант заставить все работать, как только план запущен в действие",
"5. У меня есть тенденция избегать очевидного и выступать с чем-то неожиданным",
"6. Я постоянно совершенствую любую работу, которую я выполняю",
"7. Я готов сделать полноценными контакты вне самой работы",
"8. Я интересуюсь всеми точками зрения до тех пор, пока я сомневаюсь в своем решении"},

new string[8]{ "1. Мне нравится анализировать ситуации и взвешивать все возможные альтернативы",
"2. Мне интересно находить практические решения проблем",
"3. Мне нравится чувствовать, что я способствую хорошим производственным отношениям",
"4. Я могу иметь сильное влияние на решения",
"5. Я умею сходиться с людьми, которые могут предложить что-то новое",
"6. Я умею убедить людей согласиться на необходимый образ действий",
"7. Я чувствую, что мое внимание полностью сосредоточено на том виде деятельности, где я могу ставить задачу",
"8. Мне нравится находить ту область, где нужно напрягать воображение"},

new string[8]{ "1. Я чувствовал бы себя подобно тому, кто удаляется в угол, чтобы придумать выход из тупика перед развитием линии поведения",
"2. Я был бы готов работать с тем, кто показал самый позитивный подход",
"3. Я бы нашел способ уменьшения размеров задачи путем установления - какой наилучший вклад могли бы внести различные индивидуальности",
"4. Мое естественное чувство крайней необходимости помогло бы мне гарантировать, что мы не отстанем от графика",
"5. Я полагаю, что я сохранил бы хладнокровие и свою способность мыслить объективно",
"6. Я бы удерживал постоянство цели вопреки давлению",
"7. Я был бы готов взять на себя руководство, если бы чувствовал, что группа не продвигается вперед",
"8. Я бы открыл дискуссии с целью стимулирования новых мыслей и получения некоего движения."},

new string[8]{ "1. Я склонен выказывать свою нетерпимость к тем, кто препятствует прогрессу",
"2. Возможно, остальные критикуют меня за то, что я слишком аналитичен и недостаточно интуитивен",
"3. Мое требование обеспечить, чтобы работа была сделана должным образом, может подкрепляться поступками",
"4. Я склонен становиться немного надоедливым, вполне вероятно, и полагаюсь на одного-двух членов команды, поощряющих и воспламеняющих меня",
"5. Я нахожу трудным начинать что-либо делать, если не ясны цели",
"6. Иногда я не в состоянии объяснить и прояснить сложные вопросы, которые приходят мне в голову",
"7. Я сознаю, что хочу от других того, что не умею делать сам",
"8. Я не решаюсь четко изложить мои вопросы против реальной оппозиции"}
        };

        string[] headings = {
            "Что, я полагаю, я могу внести в команду",
    "Мои слабые стороны командной работы могли бы быть связаны с тем что",
    "Когда я вовлечен в проект с другими людьми:",
    "Характерный для меня подход к групповой работе состоит в следующем",
    "Я получаю удовлетворение от работы, потому что",
    "Если бы вдруг мне поручили трудную задачу, ограничив время и предоставив в мое распоряжение незнакомых людей",
    "Работая в группах и думая об имеющихся у меня проблемах, я вижу, что"
        };

        public bool end = false;

        int[,] results = new int[7, 8];

        int[,] scoringPattern = {
                          { 6, 3, 5, 2, 0, 7, 1, 4},
                          { 0, 1, 4, 6, 2, 3, 5, 7},
                          { 7, 0, 2, 3, 5, 6, 4, 1},
                          { 3, 7, 1, 4, 6, 2, 0, 5},
                          { 1, 5, 3, 7, 4, 0, 2, 6},
                          { 5, 2, 6, 0, 7, 4, 1, 3},
                          { 4, 6, 0, 5, 3, 1, 7, 2}
        };

        private int headN = 0;

        public BelbinTest()
        {
            headN = 0;
        }

        /*      1: 0
                2: 2
                3: 0
                4: 3
                5: 0 
                6: 3
                7: 0
                8: 2
        */

        public string GetHead()
        {
            return headings[headN];
        }

        public string[] GetPrompts()
        {
            return prompts[headN];
        }

        public string GetPattern()
        {
            return "1: 0 \n" +
                "2: 0 \n" +
                "3: 0 \n" +
                "4: 0 \n" +
                "5: 0 \n" +
                "6: 0 \n" +
                "7: 0 \n" +
                "8: 0 \n";
        }

        public string GetExample()
        {
            return "1: 0 \n" +
                "2: 4 \n" +
                "3: 0 \n" +
                "4: 2 \n" +
                "5: 0 \n" +
                "6: 3 \n" +
                "7: 1 \n" +
                "8: 0 \n";
        }

        public Dictionary<string, int> GetResults()
        {
            if (headN < headings.Length) return null;

            Dictionary<string, int> testResults = new Dictionary<string, int>();
            int[] belbinTypesResults = new int[8];
            for (int i = 0; i < belbinTypesResults.Length; i++) belbinTypesResults[i] = 0;

            for(int i = 0; i < headings.Length; i++)
            {
                for (int j = 0; j < prompts[0].Length; j++)
                {
                    belbinTypesResults[scoringPattern[i, j]] += results[i, j];
                }
            }

            for(int i = 0; i < belbinTypesResults.Length; i++)
            {
                testResults.Add(BelbinType(i), belbinTypesResults[i]);
            }

            Dictionary<string, int> sortedResult = testResults.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);

            return sortedResult;
        }

        public int ParseAnswer(string answer)
        {
            int result = 0;

            int[] ans = new int[8];
            for (int i = 0; i < ans.Length; i++) ans[i] = 0;

            for (int i = 0; i < answer.Length; i++)
            {
                if (answer[i] == ':' && i > 0)
                {
                    if (answer[i - 1] < '1' || answer[i - 1] > '8')
                    {
                        result = -1;
                        return result;
                    }

                    int num = answer[i - 1] - '0';

                    string s = "";

                    i++;
                    while (i < answer.Length && answer[i] != '\n')
                    {
                        if(answer[i] >= '0' && answer[i] <= '9') s += answer[i];
                        i++;
                    }

                    int score = Convert.ToInt32(s);

                    ans[num - 1] = score;
                }
            }

            int sum = 0;
            for (int i = 0; i < ans.Length; i++)
            {
                sum += ans[i];
            }

            if (sum != 10)
            {
                result = -2;
                return result;
            }

            for (int i = 0; i < ans.Length; i++)
            {
                results[headN, i] = ans[i];
            }

            headN++;

            if(headN >= headings.Length)
            {
                end = true;
            }

            return result;
        }

        string BelbinType(int num)
        {
            string type = "none";
            if (num == 0)
            {
                type = "И - Исполнитель";
            }
            else if (num == 1)
            {
                type = "П - Председатель";
            }
            else if (num == 2)
            {
                type = "Ф - Формирователь";
            }
            else if (num == 3)
            {
                type = "М - Мыслитель";
            }
            else if (num == 4)
            {
                type = "Р - Разведчик";
            }
            else if (num == 5)
            {
                type = "О - Оценщик";
            }
            else if (num == 6)
            {
                type = "К - Коллективист";
            }
            else if (num == 7)
            {
                type = "Д - Доводчик";
            }
            return type;
        }
    }
}
